using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using ICSharpCode.SharpZipLib.BZip2;

namespace FastDL_Generator
{
    class Program
    {

        public static void Main(string[] args)
        {
            long Timestamp = new DateTimeOffset(DateTime.UtcNow).ToUnixTimeSeconds();
            string FileData = "// fastdl.lua generated by FastDL Generator.\n" +
             "if (SERVER) then\n";

            List<string> ChangedFiles = new List<string> { };
            List<string> Copied = new List<string> { };
            List<Thread> CurrentThreads = new List<Thread> { };
            List<string> IndexedFiles = new List<string>();
            string TempLock = "";
            Console.Title = "FastDL Generator";
            int RunningTasks = 0;
            int MaxTasks = 2;
            int CurrentFiles = 0;
            int HardLimit = 4;
            // Define Filetypes
            string[] SearchFor = new string[] {
                "materials/*.vmt",
                "materials/*.vtf",
                "materials/*.png",
                "materials/*.gif",
                "materials/*.jpg",
                "sound/*.wav",
                "sound/*.mp3",
                "sound/*.ogg",
                "maps/*.bsp",
                "maps/graphs/*.ain",
                "models/*.mdl",
                "models/*.vtx",
                "models/*.dx80.vtx",
                "models/*.dx90.vtf",
                "models/*.xbox.vtx",
                "models/*.sw.vtx",
                "models/*.vvd",
                "models/*.phy",
                "resource/*.ttf",
                "particles/*.pcf"
            };

            string MainPath;
            try
            {
                MainPath = args[0];
            }
            catch (Exception)
            {
                Console.WriteLine("Please add a Path as first arg");
                return;
            }

            string copyPath = MainPath + "/../FastDL_Upload/";
            try
            {
                if (Directory.Exists(args[1]))
                    copyPath = args[1];
            }
            catch (Exception) { }


            if (Directory.Exists(copyPath))
            {
                ForceDirectoryRemove(copyPath);
                Directory.CreateDirectory(copyPath);
                SetupDirectorys(MainPath, copyPath);
            }


            if (!Directory.Exists(MainPath))
            {
                Console.WriteLine("The given path doesnt exists: {0}", MainPath);
                return;
            }


            foreach (var Type in SearchFor)
            {
                string[] Data = TreeScan(MainPath, Type);
                foreach (var item in Data)
                {
                    IndexedFiles.Add(item.Substring(MainPath.Length + 1).Replace('\\', '/'));
                }
            }


            if (IndexedFiles.Count > 2000)
            {
                MaxTasks = IndexedFiles.Count / 1000;
                if (MaxTasks > HardLimit)
                {
                    MaxTasks = 4;
                }
            }


            foreach (var item in IndexedFiles)
            {
                FileData = FileData + " resource.AddFile(\"" + item + "\")\n";
            }

            FileData = FileData + "end";
            if (!Directory.Exists(copyPath))
                Directory.CreateDirectory(copyPath);

            File.WriteAllText(copyPath + "/fastdl.lua", FileData);

            for (int i = 0; i < MaxTasks; i++)
            {
                Thread temp = new Thread(new ThreadStart(TaskThread));
                temp.Start();
                Console.WriteLine("Thread #{0} Started", i);
                CurrentThreads.Add(temp);
                RunningTasks++;
            }

            void TaskThread()
            {
                    Console.WriteLine("Starting Copy...");
                    foreach (string item in IndexedFiles)
                    {
                    if (TempLock == item)
                    {
                        continue;
                    }
                    TempLock = item;
                        if (!Copied.Contains(item))
                        {
                            Copied.Add(item);
                            string OldPath = MainPath + "/" + item;
                            string newPath = copyPath + "/" + item;

                            if (File.Exists(OldPath))
                            {
                                Console.WriteLine("copy > " + item);

                                try
                                {
                                    CopyFile(MainPath + "/" + item, copyPath + "/" + item);
                                }
                                catch (Exception e)
                                {
                                    System.Diagnostics.Debug.WriteLine("Unkown error while copy\n'{0}'\nbecause: {1}", item,e);
                                    try
                                    {
                                        if (File.Exists(copyPath + "/" + item))
                                            File.Delete(copyPath + "/" + item);
                                    }
                                    catch (Exception) { }

                                    Copied.Remove(item);
                                }
                            }
                        }
                        else
                        {
                            continue;
                        }

                    }
                    
                long Edited = 0;
                    Console.WriteLine("Starting Bzip2...");
                    foreach (string item in IndexedFiles)
                    {
                        if (!ChangedFiles.Contains(item))
                        {
                            ChangedFiles.Add(item);
                            Edited++;
                        }
                        else
                        {
                            continue;
                        }

                        try
                        {
                            string Path = copyPath + "/" + item;


                            if (File.Exists(Path))
                            {
                                Console.WriteLine("compressing > " + item);
                                BzipFile(Path);

                                Console.Title = " Compressed " + CurrentFilesn(ChangedFiles.Count) + " / " + IndexedFiles.Count + " Files, Running Threads: " + CurrentThreads.Count + ", Running since " + GetRunningTime() + " seconds.";
                            }
                        }
                        catch (Exception)
                        {

                        }
                    
                }
                RunningTasks--;
                Console.WriteLine("Thread Killed with {0} compressed files. {1} Threads remaining please be patient...", Edited, RunningTasks);

                if (RunningTasks <= 0)
                {
                    Console.WriteLine("All Threads Killed, Generator closed");
                    Timestamp = new DateTimeOffset(DateTime.UtcNow).ToUnixTimeSeconds() - Timestamp;
                    System.Diagnostics.Debug.WriteLine("this just took {0} seconds.", GetRunningTime());
                }

            }



            int CurrentFilesn(int newc)
            {
                if (newc > CurrentFiles)
                    CurrentFiles = newc;
                return CurrentFiles;
            }
            long GetRunningTime()
            {
                long CurrentTimestamp = new DateTimeOffset(DateTime.UtcNow).ToUnixTimeSeconds();
                return (CurrentTimestamp - Timestamp);
            }
        }



        private static void SetupDirectorys(string From, string To)
        {
            string[] folders = Directory.GetDirectories(@From);
            foreach (string item in folders)
            {
                string Direct = To + item.Substring(From.Length).Replace('\\', '/');
                Directory.CreateDirectory(Direct);
            }
        }
        private static void ForceDirectoryRemove(string destinationDir)
        {
            const int trys = 10;
            for (var attempt = 1; attempt <= trys; attempt++)
            {
                try
                {
                    Directory.Delete(destinationDir, true);
                }
                catch (DirectoryNotFoundException)
                {
                    return;  // good!
                }
                catch (IOException)
                { // System.IO.IOException: The directory is not empty
                    System.Diagnostics.Debug.WriteLine("Something just blocked the deletion of {0}! attempt #{1}.", destinationDir, attempt);
                    Thread.Sleep(50);
                    continue;
                }
                return;
            }
            return;
        }
        private static void CopyFile(string FileFrom, string FileTo)
        {
            string oldFile = FileFrom;
            string newFile = FileTo;

            Directory.CreateDirectory(@newFile);
            Directory.Delete(@newFile); // hacky way

            try
            {
                File.Copy(oldFile, newFile, true);
            }
            catch (Exception)
            {
                System.Diagnostics.Debug.WriteLine("Error at Copy:\n" + oldFile + " >>> " + newFile);
            }
        }

        private static string[] TreeScan(string mainDir, string search)
        {
            try
            {
                return Directory.GetFiles(mainDir, search, SearchOption.AllDirectories);
            }
            catch (Exception)
            {
                return new string[] { };
            }
        }



        private static bool BzipFile(string Path)
        {
            if (!File.Exists(Path))
            {
                return false;
            }
            FileInfo fileToBeZipped = new FileInfo(Path);
            FileInfo zipFileName = new FileInfo(string.Concat(fileToBeZipped.FullName, ".bz2"));
            using (FileStream fileToBeZippedAsStream = fileToBeZipped.OpenRead())
            {
                using (FileStream zipTargetAsStream = zipFileName.Create())
                {
                    try
                    {
                        BZip2.Compress(fileToBeZippedAsStream, zipTargetAsStream, true, 4096);
                        System.IO.File.Delete(Path);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);
                        return false;
                    }
                }
            }
            return true;
        }
    }
}