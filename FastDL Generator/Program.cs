using System;
using System.Collections.Generic;
using System.IO;
using ICSharpCode.SharpZipLib.BZip2;

namespace FastDL_Generator
{
    class Program
    {

        public static void Main(string[] args)
        {
            Console.Title = "FastDL Generator";

            // Define Filetypes
            string[] SearchFor = new string[] {
                "materials/*.vmt",
                "materials/*.vtf",
                "materials/*.png",
                "materials/*.gif",
                "materials/*.jpg",
                "sound/*.wav",
                "sound/*.mp3",
                "maps/*.bsp",
                "maps/graphs/*.ain",
                "models/*.mdl",
                "models/*.dx80.vtx",
                "models/*.dx90.vtf",
                "models/*.xbox.vtx",
                "models/*.sw.vtx",
                "models/*.vvd",
                "models/*.phy",
                "resource/*.ttf",
                "particles/*.pcf"
            } ;

            // Setting mainpath if arg[0] (first argument given to programm) is set
            string MainPath;
                try
                {
                    MainPath = args[0]; 
                }
                catch (Exception)
                {
                    Console.WriteLine("Please add a Path as first arg");
                    return;
                }

            // Same as above but instead quitting just set default path as the target path
            string copyPath = MainPath + "/../FastDL_Upload/";
                try
                {
                    if(Directory.Exists(args[1]))
                        copyPath = args[1];
                }
                catch (Exception)  { }

            // if it exists Clear it because we need a clear folder
            if(Directory.Exists(copyPath))
            {
                Directory.Delete(copyPath, true);
            }

            if(!Directory.Exists(MainPath))
            {
                Console.WriteLine("The given path doesnt exists: {0}",MainPath);
                return;
            }


            List<string> IndexedFiles = new List<string>();

            // Indexing files 
            foreach (var Type in SearchFor)
            {
                string[] Data = TreeScan(MainPath, Type);
                foreach (var item in Data)
                {
                    IndexedFiles.Add(item.Substring(MainPath.Length + 1).Replace('\\', '/'));
                }
            }
            
            
            // Define first 2 lines for fastdl.lua
            string FileData =   "// fastdl.lua generated by FastDL Generator.\n" +
                                "if (SERVER) then\n";

            // While copy files to target folder add line to File
            foreach (var item in IndexedFiles)
            {
                Console.WriteLine("Copy > "+item);
                FileData = FileData + " resource.AddFile(\""+item+"\")\n";
                CopyFile(item, MainPath, copyPath);
            }

            // and the end
            FileData = FileData + "end";

            // Save the fastdl.lua in the target folder
            File.WriteAllText(copyPath + "/fastdl.lua", FileData);

            // Bzip2 any file in the Index (in the target folder)
            int temp = 0;
            Console.Title = "Bzipping...";
            foreach (var item in IndexedFiles)
            {
                temp++;
                Console.WriteLine("compressing > " + item);
                Console.Title = "compressing file " + temp+" / " + IndexedFiles.Count+"...";

                BzipFile(copyPath + "/" + item);
            }

            
               // and last but not least: Saying that this is closed so nobody can think that this is crashed
            Console.WriteLine("This programm is closing now");


        }


        private static void CopyFile(string Filee,string oldFolder, string NewFolder)
        {
            string oldFile = oldFolder+"/"+ Filee;
            string newFile = NewFolder+"/"+ Filee;
            Directory.CreateDirectory(newFile);
            Directory.Delete(newFile); // hacky way
            try
            {
                File.Copy(oldFile, newFile, true);
            }
            catch (Exception)
            {
                Console.WriteLine("Error at Copy:\n" + oldFile + " >>> " + newFile);
            }
        }
        
        private static string[] TreeScan(string mainDir, string search)
        {
            try
            {
                return Directory.GetFiles(mainDir, search, SearchOption.AllDirectories);
            }
            catch (Exception)
            {
                return new string[] { };
            }

        }

        private static bool BzipFile(string Path)
        {
            if(!File.Exists(Path))
            {
                return false;
            }
            FileInfo fileToBeZipped = new FileInfo(Path);
            FileInfo zipFileName = new FileInfo(string.Concat(fileToBeZipped.FullName, ".bz2"));
            using (FileStream fileToBeZippedAsStream = fileToBeZipped.OpenRead())
            {
                using (FileStream zipTargetAsStream = zipFileName.Create())
                {
                    try
                    {
                        BZip2.Compress(fileToBeZippedAsStream, zipTargetAsStream, true, 4096);
                        System.IO.File.Delete(Path);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);
                        return false;
                    }
                }
            }
            return true;
        }
    }
} 